sensor:
  - platform: command_line
    command: /srv/hass/bin/python3 -c "import requests; print(requests.get('https://pypi.python.org/pypi/homeassistant/json').json()['info']['version'])"
    name: PyPI Version
    scan_interval: 3600
  - platform: command_line
    name: HA Version
    command: "/srv/hass/bin/hass --version"
    scan_interval: 360000
  - platform: template
    sensors:
      ha_last_restart:
        value_template: '{% if states.automation.startup_notification and states.automation.startup_notification.attributes.last_triggered %}
                           {{ as_timestamp(states.automation.startup_notification.attributes.last_triggered) | timestamp_custom("%b %d %X") }}
                         {% else %}
                           Never
                         {% endif %}'
        friendly_name: HA Last Restart
#      ha_restart_count:
#        value_template: '{{ states.input_slider.ha_restart_count.state | int }}'
#        friendly_name: HA Restarts this version

  - platform: command_line
    name: SSL Expiry
    unit_of_measurement: days
    scan_interval: 86400
    command: "ssl-cert-check -c /etc/letsencrypt/live/hide_name/cert.pem | tail -c 36"

automation:
  - alias: 'Update Available Notification'
    hide_entity: true
    trigger:
      platform: state
      entity_id: updater.updater
    action:
      service: notify.pushbullet
      data:
        title: "HomeAssistant Update"
        message: "HomeAssistant {{ states('updater.updater') }} is now available."

  - alias: "Startup Notification"
    hide_entity: true
    trigger:
      platform: homeassistant
      event: start
    action:
      - service: notify.pushbullet
        data:
          title: "HomeAssistant Startup"
          message: "Home Assistant restarted."
#      - service: input_number.set_value
#        data_template:
#          entity_id: input_number.ha_restart_count
#          value: '{{ states.input_number.ha_restart_count.state | int + 1 }}'
      - condition: state
        entity_id: binary_sensor.new_version_check
        state: 'on'
      - service: persistent_notification.create
        data:
          title: 'HA Version'
          message: 'This is a first run on a new HomeAssistant version.'
      - service: shell_command.version_check_create_file
#      - service: input_number.set_value
#        data:
#          entity_id: input_number.ha_restart_count
#          value: '0'

#  - alias: "Restart Count Reset"
#    hide_entity: true
#    trigger:
#      platform: time
#      after: '0:00:00'
#    condition:
#      - condition: template
#        value_template: '{{ as_timestamp(now())|timestamp_custom("%w", true) | int == 0 }}'
#    action:
#      - service: input_slider.select_value
#        data:
#          entity_id: input_slider.ha_restart_count
#          value: '0'

  # - alias: "New Version Detected"
  #   hide_entity: true
  #   trigger:
  #     platform: state
  #     entity_id: binary_sensor.new_version_check
  #     to: 'on'
  #   action:
  #     - service: notify.pushbullet
  #       data:
  #         title: "HomeAssistant Version"
  #         message: "New Homeassistant version"
  #     - service: persistent_notification.create
  #       data:
  #         title: 'HA Version'
  #         message: 'This is a first run on a new HomeAssistant version.'
  #     - service: shell_command.version_check_create_file

group:
  hass:
    name: HomeAssistant
    entities:
      - sensor.ha_version
      - sensor.pypi_version
      - sensor.ha_last_restart
#      - sensor.ha_restart_count
      - sensor.ssl_expiry

#input_number:
#  ha_restart_count:
#    min: 0
#    max: 99
#    step: 1

shell_command:
  version_check_create_file: 'touch /srv/hasscfg/deps/version_file'

binary_sensor:
  - platform: command_line
    name: New Version Check
    command: ' [ -e /srv/hasscfg/deps/version_file ] && echo "OFF" || echo "ON" '
    scan_interval: 21600

#homeassistant:
#  customize:
#    input_number.ha_restart_count:
#      hidden: true
